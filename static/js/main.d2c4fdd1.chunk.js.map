{"version":3,"sources":["Validate.tsx","serviceWorker.ts","index.tsx"],"names":["allRules","namae","require","type","maxLength","msg","hurigana","kana","pref","mail","email","validate","val","rule","i","length","String","match","typeNameArr","Object","keys","j","typeName","Number","Input","props","react_default","a","createElement","Validate_InputRadio","Validate_InputCheckbox","Validate_InputText","InputText","className","name","value","state","placeholder","onChange","e","handleChange","concat","err","InputRadio","items","map","item","key","label","InputCheckbox","Select","Icon","event","currentTarget","errMsg","result","newState","objectSpread","saveState","Validate","_useState","useState","sex","mailmag","_useState2","slicedToArray","errFlg","values","some","method","action","Validate_Icon","Validate_Input","Validate_Select","onClick","nameArr","forEach","handleClick","disabled","Boolean","window","location","hostname","ReactDOM","render","src_Validate_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2c4fdd1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./Validate.scss\";\ntype Val = string | number;\n\ntype IValidate = {\n  [key: string]: {\n    value: string;\n    err: string;\n  };\n};\ntype InputProps = {\n  name: string;\n  type: \"text\" | \"tel\" | \"url\" | \"email\" | \"password\" | \"hidden\";\n  value?: Val;\n  rule?: string;\n  placeholder: string;\n  saveState: React.Dispatch<React.SetStateAction<IValidate>>;\n  state: IValidate;\n};\ntype RadioProps = {\n  name: string;\n  type: \"radio\";\n  value?: Val;\n  rule?: string;\n  items: {\n    value: Val;\n    label: Val;\n  }[];\n  saveState: React.Dispatch<React.SetStateAction<IValidate>>;\n  state: IValidate;\n};\ntype CheckboxProps = {\n  name: string;\n  type: \"checkbox\";\n  value?: Val;\n  rule?: string;\n  items: {\n    value: Val;\n    label: Val;\n  }[];\n  saveState: React.Dispatch<React.SetStateAction<IValidate>>;\n  state: IValidate;\n};\ntype SelectProps = {\n  name: string;\n  value?: Val;\n  rule?: string;\n  items: {\n    value: Val;\n    label: Val;\n  }[];\n  saveState: React.Dispatch<React.SetStateAction<IValidate>>;\n  state: IValidate;\n};\ntype IconProps = {\n  label: string;\n  className: string;\n};\ntype Rule = {\n  require: boolean | Function;\n  type?: Array<string | { [key: string]: number }>;\n  msg: {\n    [key: string]: string;\n  };\n};\n\nconst allRules: {\n  [key: string]: Rule;\n} = {\n  namae: {\n    require: true,\n    type: [{ maxLength: 20 }],\n    msg: {\n      require: \"必須項目です。\",\n      maxLength: \"20文字以内で入力してください\"\n    }\n  },\n  hurigana: {\n    require: false,\n    type: [\"kana\", { maxLength: 20 }],\n    msg: {\n      kana: \"カタカナで入力してください。\",\n      maxLength: \"20文字以内で入力してください\"\n    }\n  },\n  pref: {\n    require: true,\n    msg: {\n      require: \"必須項目です。\"\n    }\n  },\n  mail: {\n    require: false,\n    type: [\"email\", { maxLength: 20 }],\n    msg: {\n      require: \"必須項目です。\",\n      maxLength: \"20文字以内で入力してください\",\n      email: \"メールアドレスの形式で入力してください。\"\n    }\n  }\n};\n\nconst validate = (val: Val, rule: Rule): string => {\n  let requireFlg = false;\n  // 必須チェック\n  if (typeof rule.require === \"function\") {\n    requireFlg = rule.require();\n  } else {\n    requireFlg = rule.require;\n  }\n  if (requireFlg && val === \"\") {\n    return \"require\";\n  }\n  // typeチェック\n  if (!rule.type) {\n    return \"\";\n  }\n  for (let i = 0; i < rule.type.length; i++) {\n    const type = rule.type[i];\n    // メアド型\n    if (val !== \"\" && type === \"email\") {\n      if (!String(val).match(/^[^@]+@.+\\..+$/)) {\n        return type;\n      }\n    }\n    // カタカナ型\n    if (val !== \"\" && type === \"kana\") {\n      if (!String(val).match(/^[ァ-ヶー　]*$/)) {\n        return type;\n      }\n    }\n    // 最大値/最小値/文字数チェック\n    if (typeof type === \"object\") {\n      const typeNameArr = Object.keys(type);\n      for (let j = 0; j < typeNameArr.length; j++) {\n        const typeName = typeNameArr[j];\n        if (typeName === \"maxLength\") {\n          if (type[typeName] < String(val).length) {\n            return \"maxLength\";\n          }\n        }\n        if (typeName === \"minValue\") {\n          if (type[typeName] > Number(val)) {\n            return \"minValue\";\n          }\n        }\n        if (typeName === \"miaxValue\") {\n          if (type[typeName] < Number(val)) {\n            return \"miaxValue\";\n          }\n        }\n      }\n    }\n  }\n  return \"\";\n};\n\nconst Input: React.FC<RadioProps | CheckboxProps | InputProps> = props => {\n  if (props.type === \"radio\") {\n    return <InputRadio {...props} />;\n  } else if (props.type === \"checkbox\") {\n    return <InputCheckbox {...props} />;\n  } else {\n    return <InputText {...props} />;\n  }\n};\n\nconst InputText: React.FC<InputProps> = props => {\n  return (\n    <div className=\"form__wrap\">\n      <input\n        type={props.type}\n        name={props.name}\n        value={props.state[props.name]!.value}\n        placeholder={props.placeholder}\n        onChange={e => handleChange(e, props)}\n        className=\"form__input\"\n      />\n      <div\n        className={`form__error ${\n          props.state[props.name].err ? \"is-error\" : \"\"\n        }`}\n      >\n        {props.state[props.name].err}\n      </div>\n    </div>\n  );\n};\nconst InputRadio: React.FC<RadioProps> = props => {\n  return (\n    <div className=\"\">\n      {props.items.map(item => {\n        return (\n          <label className=\"form__wrap\" key={item.label}>\n            <input\n              type={props.type}\n              name={props.name}\n              value={item.value}\n              onChange={e => handleChange(e, props)}\n              className=\"form__radio\"\n            />\n            <div className=\"form__label\">{item.label}</div>\n          </label>\n        );\n      })}\n      <div\n        className={`form__error ${\n          props.state[props.name].err ? \"is-error\" : \"\"\n        }`}\n      >\n        {props.state[props.name].err}\n      </div>\n    </div>\n  );\n};\nconst InputCheckbox: React.FC<CheckboxProps> = props => {\n  return (\n    <div className=\"\">\n      {props.items.map(item => {\n        return (\n          <label className=\"form__wrap\" key={item.label}>\n            <input\n              type={props.type}\n              name={props.name}\n              value={item.value}\n              onChange={e => handleChange(e, props)}\n              className=\"form__checkbox\"\n            />\n            <div className=\"form__label\">{item.label}</div>\n          </label>\n        );\n      })}\n      <div\n        className={`form__error ${\n          props.state[props.name].err ? \"is-error\" : \"\"\n        }`}\n      >\n        {props.state[props.name].err}\n      </div>\n    </div>\n  );\n};\nconst Select: React.FC<SelectProps> = props => {\n  return (\n    <div className=\"form__wrap\">\n      <label className=\"form__select-wrap\">\n        <select\n          name={props.name}\n          value={props.state[props.name].value}\n          onChange={e => handleChange(e, props)}\n          className=\"form__select\"\n        >\n          {props.items.map(item => {\n            return (\n              <option value={item.value} key={item.label}>\n                {item.label}\n              </option>\n            );\n          })}\n        </select>\n      </label>\n      <div\n        className={`form__error ${\n          props.state[props.name].err ? \"is-error\" : \"\"\n        }`}\n      >\n        {props.state[props.name].err}\n      </div>\n    </div>\n  );\n};\nconst Icon = (props: IconProps) => {\n  return <span className={props.className}>{props.label}</span>;\n};\nconst handleChange = (\n  event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  props: React.PropsWithChildren<\n    InputProps | RadioProps | CheckboxProps | SelectProps\n  >\n) => {\n  const val = event.currentTarget.value;\n  let errMsg = \"\";\n  // ルール定義がある場合のみ実行\n  if (allRules[props.name]) {\n    const rule = allRules[props.name];\n    const result: string = validate(val, rule);\n    if (result) {\n      errMsg = rule.msg[result];\n    }\n  }\n  const newState = { ...props.state };\n  newState[props.name] = {\n    value: val,\n    err: errMsg\n  };\n  props.saveState(newState);\n};\nconst handleClick = (\n  state: IValidate,\n  saveState: React.Dispatch<React.SetStateAction<IValidate>>\n) => {\n  const nameArr = Object.keys(state);\n  const newState = { ...state };\n  nameArr.forEach(name => {\n    const val = state[name].value;\n    const rule = allRules[name];\n    if (rule) {\n      const result: string = validate(val, rule);\n      if (result) {\n        newState[name][\"err\"] = rule.msg[result];\n      }\n    }\n  });\n  saveState(newState);\n};\nconst Validate: React.FC = () => {\n  const [state, saveState] = useState<IValidate>({\n    namae: { value: \"\", err: \"\" },\n    hurigana: { value: \"\", err: \"\" },\n    sex: { value: \"\", err: \"\" },\n    pref: { value: \"\", err: \"\" },\n    mail: { value: \"\", err: \"\" },\n    mailmag: { value: \"\", err: \"\" }\n  });\n  const errArr: string[] = Object.values(state).map(item => {\n    return item.err;\n  });\n  const errFlg = errArr.some(err => {\n    return err !== \"\";\n  });\n  return (\n    <form name=\"hoge\" method=\"POST\" action=\"./confirm/\" className=\"\">\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th className=\"table__th\">\n              お名前\n              <Icon className=\"icon--require\" label=\"必須\" />\n            </th>\n            <td className=\"table__td\">\n              <Input\n                name=\"namae\"\n                type=\"text\"\n                value=\"\"\n                placeholder=\"お名前\"\n                state={state}\n                saveState={saveState}\n              />\n            </td>\n          </tr>\n          <tr>\n            <th className=\"table__th\">フリガナ</th>\n            <td className=\"table__td\">\n              <Input\n                name=\"hurigana\"\n                type=\"text\"\n                value=\"\"\n                placeholder=\"フリガナ\"\n                state={state}\n                saveState={saveState}\n              />\n            </td>\n          </tr>\n          <tr>\n            <th className=\"table__th\">性別</th>\n            <td className=\"table__td\">\n              <Input\n                name=\"sex\"\n                type=\"radio\"\n                value=\"\"\n                items={[\n                  { value: 0, label: \"男性\" },\n                  { value: 1, label: \"女性\" }\n                ]}\n                state={state}\n                saveState={saveState}\n              />\n            </td>\n          </tr>\n          <tr>\n            <th className=\"table__th\">\n              都道府県\n              <Icon className=\"icon--require\" label=\"必須\" />\n            </th>\n            <td className=\"table__td\">\n              <Select\n                name=\"pref\"\n                value=\"\"\n                items={[\n                  { value: \"\", label: \"選択してください\" },\n                  { value: 1, label: \"北海道\" }\n                ]}\n                state={state}\n                saveState={saveState}\n              />\n            </td>\n          </tr>\n          <tr>\n            <th className=\"table__th\">メールアドレス</th>\n            <td className=\"table__td\">\n              <Input\n                name=\"mail\"\n                type=\"email\"\n                value=\"\"\n                placeholder=\"example@example.com\"\n                state={state}\n                saveState={saveState}\n              />\n              <Input\n                name=\"mailmag\"\n                type=\"checkbox\"\n                value=\"\"\n                items={[{ value: 1, label: \"メールマガジンを受け取る\" }]}\n                state={state}\n                saveState={saveState}\n              />\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      <div className=\"btn__wrap\">\n        <button\n          className=\"btn--submit\"\n          onClick={() => handleClick(state, saveState)}\n          disabled={errFlg}\n        >\n          送信\n        </button>\n      </div>\n    </form>\n  );\n};\nexport default Validate;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Validate from './Validate';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Validate />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}